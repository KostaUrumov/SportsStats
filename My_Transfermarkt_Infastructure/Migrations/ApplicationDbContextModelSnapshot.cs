// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using My_Transfermarkt.Data;

#nullable disable

namespace My_Transfermarkt_Infastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "9f0b9a09-3fee-47d3-8518-a7f6d630fb67",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c93174e-3b0e-446f-86af-883d56fr7210",
                            ConcurrencyStamp = "b9b6eff1-d6ef-4902-b862-384160867cab",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "4t67567e-5f7e-446f-88fa-441f56fr8700",
                            ConcurrencyStamp = "4287ad68-f437-4ee2-b55c-81a3098abda0",
                            Name = "Agent",
                            NormalizedName = "AGENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Agent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.AgentsFootballers", b =>
                {
                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FootballerId")
                        .HasColumnType("int");

                    b.HasKey("AgentId", "FootballerId");

                    b.HasIndex("FootballerId");

                    b.ToTable("AgentsFootballers");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bulgaria",
                            ShortName = "BU"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Spain",
                            ShortName = "SP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hungary",
                            ShortName = "HU"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Usa",
                            ShortName = "US"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Japan",
                            ShortName = "JA"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bahrain",
                            ShortName = "BA"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ukraine",
                            ShortName = "UK"
                        },
                        new
                        {
                            Id = 8,
                            Name = "England",
                            ShortName = "EN"
                        },
                        new
                        {
                            Id = 9,
                            Name = "France",
                            ShortName = "FR"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Norway",
                            ShortName = "NO"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Egypt",
                            ShortName = "EG"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Netherlands",
                            ShortName = "NE"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Italy",
                            ShortName = "IT"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Germany",
                            ShortName = "DE"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sweden",
                            ShortName = "SW"
                        });
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Footballer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentMarketValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDateContract")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<decimal>("HighestValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("HishestValueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InternationalCaps")
                        .HasColumnType("int");

                    b.Property<bool>("IsRetired")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("PreferedFoot")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDateContract")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TeamId");

                    b.ToTable("Footballers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDay = new DateTime(2000, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 1,
                            CurrentMarketValue = 150000m,
                            FirstName = "Tsanko",
                            HighestValue = 150000m,
                            HishestValueDate = new DateTime(2024, 4, 30, 12, 10, 9, 860, DateTimeKind.Local).AddTicks(4145),
                            InternationalCaps = 15,
                            IsRetired = false,
                            LastName = "Tsvetanov",
                            Position = 1,
                            PreferedFoot = 1
                        },
                        new
                        {
                            Id = 2,
                            BirthDay = new DateTime(1997, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 1,
                            CurrentMarketValue = 170000.23m,
                            FirstName = "Milen",
                            HighestValue = 170000.23m,
                            HishestValueDate = new DateTime(2024, 4, 30, 12, 10, 9, 860, DateTimeKind.Local).AddTicks(4197),
                            InternationalCaps = 3,
                            IsRetired = false,
                            LastName = "Gamakov",
                            Position = 2,
                            PreferedFoot = 1
                        },
                        new
                        {
                            Id = 3,
                            BirthDay = new DateTime(1997, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 1,
                            CurrentMarketValue = 200000.23m,
                            FirstName = "Ivan",
                            HighestValue = 200000.23m,
                            HishestValueDate = new DateTime(2024, 4, 30, 12, 10, 9, 860, DateTimeKind.Local).AddTicks(4212),
                            InternationalCaps = 11,
                            IsRetired = false,
                            LastName = "Petkov",
                            Position = 3,
                            PreferedFoot = 1
                        });
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TournamentID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.GroupsTournament", b =>
                {
                    b.Property<int>("TournamenId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("TournamenId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupsTournaments");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.GroupTeams", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("GroupsTeams");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AwayScore")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RefereeId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Referee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.HasIndex("TournamentId");

                    b.ToTable("Referees");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.RefereesTournaments", b =>
                {
                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("RefereeId")
                        .HasColumnType("int");

                    b.HasKey("TournamentId", "RefereeId");

                    b.HasIndex("RefereeId");

                    b.ToTable("RefereesTournaments");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Build")
                        .HasColumnType("datetime2");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Stadiums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Build = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 19999,
                            CountryId = 8,
                            Name = "New Anfield"
                        },
                        new
                        {
                            Id = 2,
                            Build = new DateTime(1899, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 33999,
                            CountryId = 14,
                            Name = "Arena Koblenz"
                        },
                        new
                        {
                            Id = 3,
                            Build = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 75024,
                            CountryId = 14,
                            Name = "Alianz Arena"
                        },
                        new
                        {
                            Id = 4,
                            Build = new DateTime(1934, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 74667,
                            CountryId = 14,
                            Name = "Olympiastadion"
                        },
                        new
                        {
                            Id = 5,
                            Build = new DateTime(1969, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 24310,
                            CountryId = 14,
                            Name = "Bochum Arena"
                        },
                        new
                        {
                            Id = 6,
                            Build = new DateTime(1977, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 33979,
                            CountryId = 14,
                            Name = "Arena Diesel"
                        },
                        new
                        {
                            Id = 7,
                            Build = new DateTime(1948, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 51024,
                            CountryId = 15,
                            Name = "Solna Arena"
                        },
                        new
                        {
                            Id = 8,
                            Build = new DateTime(1947, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 74667,
                            CountryId = 8,
                            Name = "Old Trafford"
                        },
                        new
                        {
                            Id = 9,
                            Build = new DateTime(1974, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 81365,
                            CountryId = 14,
                            Name = "Westfalenstadion"
                        },
                        new
                        {
                            Id = 10,
                            Build = new DateTime(2004, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 81365,
                            CountryId = 14,
                            Name = "Red Bull Arena"
                        },
                        new
                        {
                            Id = 11,
                            Build = new DateTime(1928, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 50000,
                            CountryId = 14,
                            Name = "Max-Morlock-Stadion"
                        },
                        new
                        {
                            Id = 12,
                            Build = new DateTime(1929, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 60449,
                            CountryId = 14,
                            Name = "MHPArena"
                        },
                        new
                        {
                            Id = 13,
                            Build = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 18455,
                            CountryId = 1,
                            Name = "Hristo Botev"
                        },
                        new
                        {
                            Id = 14,
                            Build = new DateTime(1963, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Capacity = 29200,
                            CountryId = 1,
                            Name = "Georgi Asparihov"
                        });
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("FootballerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StadiumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FootballerId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 8,
                            Name = "Manchester United",
                            StadiumId = 8
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 8,
                            Name = "Newcastle United",
                            StadiumId = 2
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 14,
                            Name = "Hertha Berlin",
                            StadiumId = 4
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 14,
                            Name = "Kolenz",
                            StadiumId = 2
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 15,
                            Name = "AIK Solna",
                            StadiumId = 7
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 8,
                            Name = "Lecester City",
                            StadiumId = 1
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 8,
                            Name = "Liverpool",
                            StadiumId = 1
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 14,
                            Name = "Stuttgart",
                            StadiumId = 12
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 14,
                            Name = "Borissia Dortmund",
                            StadiumId = 9
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            Name = "Levski Sofia",
                            StadiumId = 14
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 14,
                            Name = "Bochum",
                            StadiumId = 5
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 14,
                            Name = "Bayern Munchen",
                            StadiumId = 3
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 1,
                            Name = "Botev Plovdiv",
                            StadiumId = 13
                        },
                        new
                        {
                            Id = 51,
                            CountryId = 14,
                            Name = "Nuremberg",
                            StadiumId = 11
                        },
                        new
                        {
                            Id = 61,
                            CountryId = 14,
                            Name = "FC Magdeburg",
                            StadiumId = 6
                        },
                        new
                        {
                            Id = 82,
                            CountryId = 14,
                            Name = "BFC Dynamo",
                            StadiumId = 4
                        });
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.TeamsFootballers", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("FootballerId")
                        .HasColumnType("int");

                    b.HasKey("TeamId", "FootballerId");

                    b.HasIndex("FootballerId");

                    b.ToTable("TeamsFootballers");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Tournament");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.TournamentsTeams", b =>
                {
                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("TournamentId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TournamentsTeams");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.GroupStageTournament", b =>
                {
                    b.HasBaseType("My_Transfermarkt_Infastructure.DataModels.Tournament");

                    b.Property<int>("NumberOfGroups")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTeams")
                        .HasColumnType("int")
                        .HasColumnName("GroupStageTournament_NumberOfTeams");

                    b.HasDiscriminator().HasValue("GroupStageTournament");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.SingleGroupTournament", b =>
                {
                    b.HasBaseType("My_Transfermarkt_Infastructure.DataModels.Tournament");

                    b.Property<int>("NumberOfTeams")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SingleGroupTournament");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Champions League 23/24",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfTeams = 0
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bundesliga 23/24",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfTeams = 0
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Serie A 23/24",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfTeams = 0
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Championship 23/24",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfTeams = 0
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Parva Liga 23/24",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfTeams = 0
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Premier League 23/24",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfTeams = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Agent", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.AgentsFootballers", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Agent", "Agent")
                        .WithMany("AgentFootballers")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Footballer", "Footballer")
                        .WithMany("AgentsFootballers")
                        .HasForeignKey("FootballerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Footballer");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Footballer", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Agent");

                    b.Navigation("Country");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Group", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.GroupsTournament", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.GroupTeams", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Group", "Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Match", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Team", "AwayTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Team", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Referee", "Referee")
                        .WithMany("Matches")
                        .HasForeignKey("RefereeId");

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Team", null)
                        .WithMany("Matches")
                        .HasForeignKey("TeamId");

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Referee");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Referee", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Tournament", null)
                        .WithMany("Referees")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.RefereesTournaments", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Referee", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Referee");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Stadium", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Team", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Footballer", null)
                        .WithMany("TeamsPlayed")
                        .HasForeignKey("FootballerId");

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Stadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId");

                    b.Navigation("Country");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.TeamsFootballers", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Footballer", "Footballer")
                        .WithMany("TeamFootballers")
                        .HasForeignKey("FootballerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Team", "Team")
                        .WithMany("TeamFootballers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Footballer");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.TournamentsTeams", b =>
                {
                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("My_Transfermarkt_Infastructure.DataModels.Tournament", "Tournament")
                        .WithMany("TeamsTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Agent", b =>
                {
                    b.Navigation("AgentFootballers");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Footballer", b =>
                {
                    b.Navigation("AgentsFootballers");

                    b.Navigation("TeamFootballers");

                    b.Navigation("TeamsPlayed");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Group", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Referee", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Team", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");

                    b.Navigation("Matches");

                    b.Navigation("TeamFootballers");
                });

            modelBuilder.Entity("My_Transfermarkt_Infastructure.DataModels.Tournament", b =>
                {
                    b.Navigation("Referees");

                    b.Navigation("TeamsTournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
